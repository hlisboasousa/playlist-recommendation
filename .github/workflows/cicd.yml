name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
  publish-images:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push images
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

        docker buildx create --use
        docker buildx inspect --bootstrap

        docker buildx build -t hlisboa/playlist-recommendation-api:latest -f api.dockerfile --push .
        docker buildx build -t hlisboa/playlist-recommendation-model:latest -f model.dockerfile --push .
        docker buildx build -t hlisboa/playlist-recommendation-frontend:latest -f frontend.dockerfile --push .

  # unittest:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Set up Python environment with Poetry
  #     run: |
  #       curl -sSL https://install.python-poetry.org | python3 -
  #       export PATH=$PATH:$HOME/.poetry/bin
  #       poetry config virtualenvs.create false
  #     shell: bash

  #   - name: Install backend dependencies with Poetry
  #     run: poetry install --no-root
  #     working-directory: path/to/your/project

  #   - name: Run backend tests
  #     run: poetry run python -m unittest discover -s tests -p '*_test.py'
  #     working-directory: path/to/your/project

  # jest:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Set up Node.js
  #     uses: actions/setup-node@v2
  #     with:
  #       node-version: 14

  #   - name: Run frontend tests
  #     run: npm test